package DataDictionaryLan.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class StructureDefinition__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b1456067f55f1L, "DataDictionaryLan.structure.StructureDefinition");

  public static final SMethod<Integer> getFieldCount_idvB_NbVejpE = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getFieldCount").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(569590123104646762L).languageId(0x8306bb0d4f1a7057L, 0xc2fcd0fd4f134552L).build2();
  public static final SMethod<Void> generateFieldDef_idvB_NbVkiHC = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("generateFieldDef").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(569590123106216808L).languageId(0x8306bb0d4f1a7057L, 0xc2fcd0fd4f134552L).build2();
  public static final SMethod<Boolean> fieldDefAlreadyExists_idvB_NbVkm1g = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("fieldDefAlreadyExists").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(569590123106230352L).languageId(0x8306bb0d4f1a7057L, 0xc2fcd0fd4f134552L).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFieldCount_idvB_NbVejpE, generateFieldDef_idvB_NbVkiHC, fieldDefAlreadyExists_idvB_NbVkm1g);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int getFieldCount_idvB_NbVejpE(@NotNull SNode __thisNode__) {
    return (int) IElement__BehaviorDescriptor.getFieldCount_id1frmgj2KeNS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.structure$qaZM));
  }
  /*package*/ static void generateFieldDef_idvB_NbVkiHC(@NotNull SNode __thisNode__) {
    List<SNode> definitions = ListSequence.fromList(new ArrayList<SNode>());
    IElement__BehaviorDescriptor.createNewFieldDef_id6ttyxz4A9$r.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.structure$qaZM), definitions);
    for (SNode fieldDef : definitions) {
      if (!((boolean) StructureDefinition__BehaviorDescriptor.fieldDefAlreadyExists_idvB_NbVkm1g.invoke(__thisNode__, fieldDef)) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(fieldDef, LINKS.field$7Ou8), CONCEPTS.Structure$cB))) {
        SLinkOperations.getTarget(fieldDef, LINKS.domain$7I8H);
        ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.fieldDefinitions$qbtO)).addElement(fieldDef);
      }
    }
  }
  /*package*/ static boolean fieldDefAlreadyExists_idvB_NbVkm1g(@NotNull SNode __thisNode__, SNode fieldDef) {
    for (SNode fieldDefinition : SLinkOperations.getChildren(__thisNode__, LINKS.fieldDefinitions$qbtO)) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(fieldDefinition, LINKS.field$7Ou8), PROPS.name$MnvL).equals(SPropertyOperations.getString(SLinkOperations.getTarget(fieldDef, LINKS.field$7Ou8), PROPS.name$MnvL)) && fieldDef != fieldDefinition) {
        return true;
      }
    }
    return false;
  }

  /*package*/ StructureDefinition__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) getFieldCount_idvB_NbVejpE(node));
      case 1:
        generateFieldDef_idvB_NbVkiHC(node);
        return null;
      case 2:
        return (T) ((Boolean) fieldDefAlreadyExists_idvB_NbVkm1g(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink structure$qaZM = MetaAdapterFactory.getContainmentLink(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b1456067f55f1L, 0x4a7b1456067f55f4L, "structure");
    /*package*/ static final SContainmentLink domain$7I8H = MetaAdapterFactory.getContainmentLink(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795ab4L, 0x4a7b1456067980cfL, "domain");
    /*package*/ static final SContainmentLink fieldDefinitions$qbtO = MetaAdapterFactory.getContainmentLink(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b1456067f55f1L, 0x4a7b1456067f55f6L, "fieldDefinitions");
    /*package*/ static final SReferenceLink field$7Ou8 = MetaAdapterFactory.getReferenceLink(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795ab4L, 0x4a7b1456067980d5L, "field");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Structure$cB = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0xed6c1e7ab041105L, "DataDictionaryLan.structure.Structure");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
