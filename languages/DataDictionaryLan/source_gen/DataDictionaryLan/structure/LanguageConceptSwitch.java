package DataDictionaryLan.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractDomain = 0;
  public static final int Aggregation = 1;
  public static final int AndConstraint = 2;
  public static final int BetweenConstraint = 3;
  public static final int Boolean = 4;
  public static final int Character = 5;
  public static final int ComparasionConstraint = 6;
  public static final int Constraint = 7;
  public static final int ConstraintCriterum = 8;
  public static final int ConstraintOperator = 9;
  public static final int DataDictionary = 10;
  public static final int Date = 11;
  public static final int Double = 12;
  public static final int ExclusiveSpecialization = 13;
  public static final int Field = 14;
  public static final int FieldDefinition = 15;
  public static final int IElement = 16;
  public static final int ISpecialization = 17;
  public static final int IStructure = 18;
  public static final int InConstraint = 19;
  public static final int InValue = 20;
  public static final int Integer = 21;
  public static final int NonExclusiveSpecialization = 22;
  public static final int NotNulConstraint = 23;
  public static final int OrConstraint = 24;
  public static final int PredefinedDomain = 25;
  public static final int SemanticDomain = 26;
  public static final int SemanticDomainDefinition = 27;
  public static final int Set = 28;
  public static final int Structure = 29;
  public static final int StructureDefinition = 30;
  public static final int Varchar = 31;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L);
    builder.put(0x4a7b145606795a9bL, AbstractDomain);
    builder.put(0x4a7b1456067ce18bL, Aggregation);
    builder.put(0x4a7b14560692eefcL, AndConstraint);
    builder.put(0x4a7b145606786d03L, BetweenConstraint);
    builder.put(0x4a7b145606795aacL, Boolean);
    builder.put(0x4a7b145606795aadL, Character);
    builder.put(0x4a7b145606795a91L, ComparasionConstraint);
    builder.put(0x4a7b145606786cfdL, Constraint);
    builder.put(0x4a7b145606786d01L, ConstraintCriterum);
    builder.put(0x4a7b14560692eef4L, ConstraintOperator);
    builder.put(0x4a7b14560686268fL, DataDictionary);
    builder.put(0x4a7b145606795aaeL, Date);
    builder.put(0x4a7b145606795aafL, Double);
    builder.put(0x4a7b1456067d173eL, ExclusiveSpecialization);
    builder.put(0x4a7b145606822015L, Field);
    builder.put(0x4a7b145606795ab4L, FieldDefinition);
    builder.put(0x4a7b1456067980e5L, IElement);
    builder.put(0x4a7b1456067d173bL, ISpecialization);
    builder.put(0x4a7b1456067981e8L, IStructure);
    builder.put(0x4a7b145606786d10L, InConstraint);
    builder.put(0x4a7b145606786d15L, InValue);
    builder.put(0x4a7b145606795ab0L, Integer);
    builder.put(0x4a7b1456067ebf74L, NonExclusiveSpecialization);
    builder.put(0x4a7b145606786d19L, NotNulConstraint);
    builder.put(0x4a7b14560693a5ccL, OrConstraint);
    builder.put(0x4a7b145606795a9fL, PredefinedDomain);
    builder.put(0x4a7b145606795aa0L, SemanticDomain);
    builder.put(0x4a7b145606795aa3L, SemanticDomainDefinition);
    builder.put(0x4a7b1456067f06eaL, Set);
    builder.put(0xed6c1e7ab041105L, Structure);
    builder.put(0x4a7b1456067f55f1L, StructureDefinition);
    builder.put(0x4a7b145606795ab2L, Varchar);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
