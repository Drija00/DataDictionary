package DataDictionaryLan.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_DataDictionary_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_DataDictionary_NonTypesystemRule() {
  }
  public void applyRule(final SNode dataDictionary, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (isEmptyString(SPropertyOperations.getString(dataDictionary, PROPS.name$MnvL))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dataDictionary, "Recnik podataka mora imati naziv", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103574383", null, errorTarget);
      }
    }
    if (ListSequence.fromList(SLinkOperations.getChildren(dataDictionary, LINKS.predefinedDomains$dxta)).isEmpty()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dataDictionary, "Morate definisati predefinisane domene", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103612177", null, errorTarget);
      }
    }
    for (SNode pDomain : SLinkOperations.getChildren(dataDictionary, LINKS.predefinedDomains$dxta)) {
      SNode current = pDomain;
      String instance = null;
      if (SNodeOperations.isInstanceOf(current, CONCEPTS.Boolean$3w)) {
        instance = "Boolean";
      }
      if (SNodeOperations.isInstanceOf(current, CONCEPTS.Varchar$6q)) {
        instance = "Varchar";
      }
      if (SNodeOperations.isInstanceOf(current, CONCEPTS.Date$4u)) {
        instance = "Date";
      }
      if (SNodeOperations.isInstanceOf(current, CONCEPTS.Double$4X)) {
        instance = "Double";
      }
      if (SNodeOperations.isInstanceOf(current, CONCEPTS.Integer$5s)) {
        instance = "Integer";
      }
      for (SNode node : SLinkOperations.getChildren(dataDictionary, LINKS.predefinedDomains$dxta)) {
        if (node != current) {
          if (SNodeOperations.isInstanceOf(node, CONCEPTS.Boolean$3w) && instance == "Boolean") {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "Duplicate boolean domains", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103874682", null, errorTarget);
            }
          }
          if (SNodeOperations.isInstanceOf(node, CONCEPTS.Varchar$6q) && instance == "Varchar") {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "Duplicate text domains", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103875363", null, errorTarget);
            }
          }
          if (SNodeOperations.isInstanceOf(node, CONCEPTS.Double$4X) && instance == "Double") {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "Duplicate double domains", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103879730", null, errorTarget);
            }
          }
          if (SNodeOperations.isInstanceOf(node, CONCEPTS.Integer$5s) && instance == "Integer") {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "Duplicate integer domains", "r:d26a83d4-ec7d-4f6a-b9d9-5d05b0352b0d(DataDictionaryLan.typesystem)", "569590123103880595", null, errorTarget);
            }
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.DataDictionary$Kx;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.isEmpty();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink predefinedDomains$dxta = MetaAdapterFactory.getContainmentLink(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b14560686268fL, 0x4a7b145606862695L, "predefinedDomains");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Boolean$3w = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795aacL, "DataDictionaryLan.structure.Boolean");
    /*package*/ static final SConcept Varchar$6q = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795ab2L, "DataDictionaryLan.structure.Varchar");
    /*package*/ static final SConcept Date$4u = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795aaeL, "DataDictionaryLan.structure.Date");
    /*package*/ static final SConcept Double$4X = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795aafL, "DataDictionaryLan.structure.Double");
    /*package*/ static final SConcept Integer$5s = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b145606795ab0L, "DataDictionaryLan.structure.Integer");
    /*package*/ static final SConcept DataDictionary$Kx = MetaAdapterFactory.getConcept(0xc2fcd0fd4f134552L, 0x8306bb0d4f1a7057L, 0x4a7b14560686268fL, "DataDictionaryLan.structure.DataDictionary");
  }
}
